import os
import mimetypes
from flask import Flask, request, jsonify
from flask_cors import CORS
from email.message import EmailMessage
import smtplib

app = Flask(__name__)
CORS(app)  # allow your frontend to call the API

# Use ephemeral disk on Render
UPLOAD_FOLDER = "/tmp"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# ------------- Email config (from environment variables) -------------
def _get_bool(name, default="false"):
    return os.getenv(name, default).strip().lower() in ("1", "true", "yes", "y", "on")

SMTP_HOST = os.getenv("SMTP_HOST", "")          # e.g. smtp.gmail.com or smtp.office365.com
SMTP_PORT = int(os.getenv("SMTP_PORT", "587"))  # 587 (TLS) or 465 (SSL)
SMTP_USER = os.getenv("SMTP_USER", "")          # full username (email)
SMTP_PASS = os.getenv("SMTP_PASS", "")          # app password or SMTP password
SMTP_USE_SSL = _get_bool("SMTP_USE_SSL", "false")
SMTP_USE_STARTTLS = _get_bool("SMTP_USE_STARTTLS", "true")  # usually True for 587

FROM_EMAIL = os.getenv("FROM_EMAIL", SMTP_USER)
FROM_NAME = os.getenv("FROM_NAME", "DraftQ")

def send_email_smtp(to_email: str, subject: str, body_text: str, attachments=None):
    """
    Send an email via SMTP with optional attachments.
    attachments: list of file paths
    """
    if not (SMTP_HOST and SMTP_PORT and SMTP_USER and SMTP_PASS):
        raise RuntimeError("SMTP is not configured: set SMTP_HOST/SMTP_PORT/SMTP_USER/SMTP_PASS")

    msg = EmailMessage()
    msg["From"] = f"{FROM_NAME} <{FROM_EMAIL or SMTP_USER}>"
    msg["To"] = to_email
    msg["Subject"] = subject
    msg.set_content(body_text)

    attachments = attachments or []
    for path in attachments:
        if not path or not os.path.isfile(path):
            continue
        ctype, encoding = mimetypes.guess_type(path)
        if ctype is None:
            ctype = "application/octet-stream"
        maintype, subtype = ctype.split("/", 1)
        with open(path, "rb") as f:
            msg.add_attachment(f.read(), maintype=maintype, subtype=subtype, filename=os.path.basename(path))

    if SMTP_USE_SSL:
        with smtplib.SMTP_SSL(SMTP_HOST, SMTP_PORT) as server:
            server.login(SMTP_USER, SMTP_PASS)
            server.send_message(msg)
    else:
        with smtplib.SMTP(SMTP_HOST, SMTP_PORT) as server:
            server.ehlo()
            if SMTP_USE_STARTTLS:
                server.starttls()
                server.ehlo()
            server.login(SMTP_USER, SMTP_PASS)
            server.send_message(msg)

# ------------------------- Routes -------------------------

@app.route("/", methods=["GET"])
def home():
    return jsonify(message="DraftQ backend is running")

@app.route("/health", methods=["GET"])
def health():
    return jsonify(ok=True)

@app.route("/process_layout", methods=["POST"])
def process_layout():
    """
    Expects JSON or multipart form-data with:
      - email: recipient email address
      - (your existing layout payload / file)
    After generating the BOQ, it emails the file.
    """
    # 1) Get recipient
    email = (request.form.get("email") if request.form else None) or \
            (request.json.get("email") if request.is_json and request.json else None)
    if not email:
        return jsonify(ok=False, error="Missing 'email'"), 400

    # 2) TODO: Your existing layout processing goes here.
    #    Generate your BOQ file and save to /tmp (or wherever you already do).
    #    For now, we simulate a file path you already produce:
    boq_path = os.path.join(UPLOAD_FOLDER, "boq.xlsx")
    if not os.path.exists(boq_path):
        # If your pipeline writes CSV, PDF, etc., change this accordingly.
        # Here we just create a tiny placeholder Excel-compatible CSV for demo.
        sample_csv = os.path.join(UPLOAD_FOLDER, "boq.csv")
        with open(sample_csv, "w", encoding="utf-8") as f:
            f.write("Item,Qty,Unit,Rate,Amount\nConcrete,10,m3,250,2500\nSteel,500,kg,6,3000\n")
        boq_path = sample_csv

    # 3) Email the BOQ
    subject = "Your DraftQ BOQ"
    body = (
        "Hello,\n\n"
        "Your BOQ has been generated by DraftQ and is attached to this email.\n\n"
        "If you have any issues opening the file, reply to this email.\n\n"
        "Best regards,\nDraftQ"
    )

    try:
        send_email_smtp(
            to_email=email,
            subject=subject,
            body_text=body,
            attachments=[boq_path]
        )
        return jsonify(ok=True, message=f"BOQ emailed to {email}", email_sent=True)
    except Exception as e:
        # Fall back to previous behavior (no email) but return the reason
        return jsonify(ok=False, message="BOQ generated (email failed)", email_sent=False, error=str(e)), 500

@app.route("/send_test_email", methods=["POST"])
def send_test_email():
    """
    Simple test endpoint: POST JSON {"to":"you@example.com"} to verify SMTP env.
    """
    data = request.get_json(force=True)
    to_email = data.get("to")
    if not to_email:
        return jsonify(ok=False, error="Missing 'to'"), 400

    try:
        send_email_smtp(
            to_email=to_email,
            subject="DraftQ test email",
            body_text="This is a test email from DraftQ backend. ðŸŽ¯"
        )
        return jsonify(ok=True, message=f"Test email sent to {to_email}")
    except Exception as e:
        return jsonify(ok=False, error=str(e)), 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))